.gitconfig responsável pelas opções de configuração do GIT, utilizando no terminal o comando:

git config --global -e

No arquivo de configuração, devemos encontrar a sessão Alias.

Caso essa sessão não exista no .gitconfig, realize a declaração desta nova sessão no final do arquivo, procedendo com a inclusão da expressão alias entre colchetes:

[alias]

O Git clone é um comando para baixar o código-fonte existente de um repositório remoto (como o Github, por exemplo).

Existem algumas maneiras de baixar o código-fonte, mas principalmente eu prefiro o clone com o modo https:

git clone <https://nome-do-link>

Com branches, vários desenvolvedores podem trabalhar em paralelo no mesmo projeto simultaneamente.

Pode-se usar o comando git branch para criar, listar e excluir branches.

Criando uma nova branch:

git branch <nome-do-branch>

Este comando criará uma branch localmente. Para enviar a nova branch para o repositório remoto, você precisa usar o seguinte comando:

git push -u <remote> <nome-da-branch>
Para ver as branches:

git branch or git branch --list
Deletando uma branch:

git branch -d <nome-da-branch>

Este é um dos comandos Git mais usados. Para trabalhar em uma branch, primeiro você precisa mudar para ela.

Usamos o git checkout principalmente para alternar de um branch para outro. Também podemos usá-lo para verificar arquivos e commits:

git checkout <nome-da-branch>
Há também um comando de atalho que permite criar e trocar para um branch ao mesmo tempo:

git checkout -b <nome-da-branch>

O comando status do Git fornece todas as informações necessárias sobre o branch atual.

git status

Quando criamos, modificamos ou excluímos um arquivo, essas alterações ocorrerão em nosso ambiente local e não serão incluídas no próximo commit (a menos que alteremos as configurações).

Precisamos usar o comando git add para incluir as alterações de um arquivo em nosso próximo commit.

Para adicionar um arquivo:

git add <arquivo>
Para adicionar tudo de uma vez:

git add -A
O comando git add não altera o repositório e as alterações não são salvas até usarmos o git commit.

Este comando é como definir um ponto de verificação no processo de desenvolvimento, para o qual você pode voltar mais tarde, se necessário.

git commit -m "mensagem explicando a mudança no código"

Após confirmar as alterações, a próxima coisa que você deseja fazer é enviar as alterações para o servidor remoto.

O comando git push envia e salva suas confirmações no repositório remoto.

git push <remote> <nome-do-branch>
No entanto, se seu branch for criado recentemente, você também precisará fazer upload do branch com o seguinte comando:

git push -u origin <nome-do-branch>

O comando git pull é usado para obter atualizações do repositório remoto.

Este comando é uma combinação de git fetch e git merge, o que significa que, quando usamos o git pull, ele recebe as atualizações do repositório remoto git fetch e aplica imediatamente as alterações mais recentes no seu local git merge.

git pull <remote>

O comando git pull é usado para obter atualizações do repositório remoto.

Este comando é uma combinação de git fetch e git merge, o que significa que, quando usamos o git pull, ele recebe as atualizações do repositório remoto git fetch e aplica imediatamente as alterações mais recentes no seu local git merge.

git pull <remote>

Quando você conclui o desenvolvimento em sua branch e tudo funciona bem, a etapa final é mesclar as branches, isso é feito com o comando git merge.

git merge <nome-da-branch>







































